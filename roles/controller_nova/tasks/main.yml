---

- name: nova package
  apt: pkg={{ item }} state=installed
  tags: nova
  with_items:
    - nova-api
    - nova-cert
    - nova-conductor
    - nova-consoleauth
    - nova-novncproxy
    - nova-scheduler
    - python-novaclient

- name: remove old sqlite db file
  file: path=/var/lib/nova/nova.sqlite state=absent
  
- name: write the nova config file
  template: src=nova.conf.j2 dest=/etc/nova/nova.conf owner=root group=root mode=0644
  notify: restart nova-all

- name: nova db sync
  shell: su -s /bin/sh -c "nova-manage db sync" nova

- name: get keystone users
  shell: OS_SERVICE_TOKEN="{{ KEYSTONE_ADMIN_TOKEN }}" OS_SERVICE_ENDPOINT=http://{{ ansible_hostname }}:35357/v2.0 keystone user-list 
  register: keystone_user_list_result

- name: create nova user
  shell: OS_SERVICE_TOKEN="{{ KEYSTONE_ADMIN_TOKEN }}" OS_SERVICE_ENDPOINT=http://{{ ansible_hostname }}:35357/v2.0 keystone user-create --name=nova --pass={{ NOVA_PASS }} --email nova@localhost
  when: keystone_user_list_result.stdout.find('nova') == -1
  
- name: get keystone role return value (nova)
  shell: OS_SERVICE_TOKEN="{{ KEYSTONE_ADMIN_TOKEN }}" OS_SERVICE_ENDPOINT=http://{{ ansible_hostname }}:35357/v2.0 keystone user-role-add --user=nova --tenant=service --role=admin
  ignore_errors: true

- name: get keystone services
  shell: OS_SERVICE_TOKEN="{{ KEYSTONE_ADMIN_TOKEN }}" OS_SERVICE_ENDPOINT=http://{{ ansible_hostname }}:35357/v2.0 keystone service-list
  register: keystone_service_list_result

- name: create nova keystone service 
  shell: OS_SERVICE_TOKEN="{{ KEYSTONE_ADMIN_TOKEN }}" OS_SERVICE_ENDPOINT=http://{{ ansible_hostname }}:35357/v2.0 keystone service-create --name=nova --type=compute --description="OpenStack Compute"
  when: keystone_service_list_result.stdout.find('nova') == -1

- name: get keystone endpoints
  shell: OS_SERVICE_TOKEN="{{ KEYSTONE_ADMIN_TOKEN }}" OS_SERVICE_ENDPOINT=http://{{ ansible_hostname }}:35357/v2.0 keystone endpoint-list 
  register: keystone_endpoint_list_result

- name: get keystone nova service id
  shell:  OS_SERVICE_TOKEN="{{ KEYSTONE_ADMIN_TOKEN }}" OS_SERVICE_ENDPOINT=http://{{ ansible_hostname }}:35357/v2.0 keystone service-list | awk '/ compute / {print $2}'
  register: keystone_nova_service_id

- name: create keystone endpoint
  shell: OS_SERVICE_TOKEN="{{ KEYSTONE_ADMIN_TOKEN }}" OS_SERVICE_ENDPOINT=http://{{ ansible_hostname }}:35357/v2.0 keystone endpoint-create --service-id={{ keystone_nova_service_id.stdout }} --publicurl=http://{{ ansible_hostname }}:8774/v2/%\(tenant_id\)s --internalurl=http://{{ ansible_hostname }}:8774/v2/%\(tenant_id\)s --adminurl=http://{{ ansible_hostname }}:8774/v2/%\(tenant_id\)s
  when: keystone_endpoint_list_result.stdout.find(keystone_nova_service_id.stdout) == -1

- name: restart nova services
  service: 
    name: "{{ item }}"
    state: restarted
  with_items:
    - nova-api
    - nova-cert
    - nova-consoleauth
    - nova-conductor
    - nova-scheduler
    - nova-novncproxy

# TODO why
- name: sleep
  shell: sleep 5

- name: check for ssh keypair
  shell: . /root/.openstack_demo.rc ; nova keypair-list | grep demo-key
  register: nova_keypair_list_out
  ignore_errors: true

- name: add keypair as demo-key
  shell: . /root/.openstack_demo.rc ; nova keypair-add --pub-key /root/.ssh/authorized_keys demo-key
  when: nova_keypair_list_out.rc != 0
